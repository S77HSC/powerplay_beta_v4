"use client";

import { useEffect, useState } from "react";
import { supabase } from "../../lib/supabase";
import GearTabs from "../../components/GearTabs";
import GearCard from "../../components/GearCard";
import CharacterBuilder from "../../components/CharacterBuilder";
import mockitems from "../../data/mockitems";
import Image from "next/image";
import Link from "next/link";
import "@fontsource/rajdhani/700.css";

export default function Page() {
  const [player, setPlayer] = useState(null);
  const [view, setView] = useState("gear");
  const [activeTab, setActiveTab] = useState("kits");
  const [ownedItemIds, setOwnedItemIds] = useState([]);
  const [groupedOwnedItems, setGroupedOwnedItems] = useState({
    kits: [],
    boots: [],
    accessories: [],
  });
  const [zoomIndex, setZoomIndex] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      if (!user) return;

      const { data: playerData } = await supabase
        .from("players")
        .select("*")
        .eq("auth_id", user.id)
        .single();

      if (!playerData) return;

      setPlayer(playerData);

      const { data: items } = await supabase
        .from("player_items")
        .select("item_id")
        .eq("player_id", playerData.id);

      const ids = items?.map((item) => item.item_id) || [];
      setOwnedItemIds(ids);

      const allItems = [
        ...mockitems.kits,
        ...mockitems.boots,
        ...mockitems.badges,
        ...mockitems.celebrations,
        ...mockitems.footballs,
        ...mockitems.accessories,
      ];

      const owned = allItems.filter((item) => ids.includes(item.id));

      setGroupedOwnedItems({
        kits: owned.filter((item) => item.id.startsWith("kit")),
        boots: owned.filter((item) => item.id.startsWith("boot")),
        accessories: owned.filter((item) => item.id.startsWith("acc")),
      });
    };

    fetchData();
  }, []);

  const filteredItems =
    view === "store"
      ? mockitems[activeTab] || []
      : (mockitems[activeTab] || []).filter((item) =>
          ownedItemIds.includes(item.id)
        );

  const handleZoom = (item) => {
    const index = filteredItems.findIndex((i) => i.id === item.id);
    setZoomIndex(index);
  };

  const zoomItem = zoomIndex !== null ? filteredItems[zoomIndex] : null;

  return (
    <main className="relative min-h-screen bg-gradient-to-br from-[#0a0f19] via-[#111827] to-[#0a0f19] text-white px-4 py-8 font-[Rajdhani] overflow-hidden">
      <div
        className="absolute inset-0 z-0 bg-cover bg-center pointer-events-none"
        style={{ backgroundImage: "url('images/locker_room_background.png')" }}
      ></div>

      <div className="relative z-10 max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold text-yellow-400 uppercase tracking-wide">
            Locker Room
          </h1>
          <Link href="/">
            <button className="bg-gray-800 text-white px-4 py-2 rounded hover:bg-yellow-600 transition font-bold uppercase text-sm">
              Back to Home
            </button>
          </Link>
        </div>

        {/* XP Display */}
        <div className="text-center text-xl md:text-2xl text-yellow-300 font-extrabold mb-4">
          XP: {player?.points ?? 0}
        </div>

        {/* Layout */}
        <div className="flex flex-col-reverse md:flex-row gap-8">
          {/* Character Builder */}
          <div className="w-full md:w-[400px] flex justify-center mt-8 md:mt-0 order-first md:order-last">
            <CharacterBuilder ownedItems={groupedOwnedItems} />
          </div>

          {/* Gear Store + Inventory */}
          <div className="flex-1 order-last md:order-first">
            {/* View Toggle */}
            <div className="flex gap-4 mb-4">
              <button
                onClick={() => setView("store")}
                className={`px-4 py-2 rounded text-sm font-bold uppercase transition ${
                  view === "store"
                    ? "bg-yellow-400 text-black"
                    : "bg-gray-800 text-white hover:bg-yellow-600"
                }`}
              >
                Store
              </button>
              <button
                onClick={() => setView("gear")}
                className={`px-4 py-2 rounded text-sm font-bold uppercase transition ${
                  view === "gear"
                    ? "bg-yellow-400 text-black"
                    : "bg-gray-800 text-white hover:bg-yellow-600"
                }`}
              >
                Your Gear
              </button>
            </div>

            {/* Tabs */}
            <GearTabs activeTab={activeTab} setActiveTab={setActiveTab} />

            {/* Gear Grid */}
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 sm:gap-6 mt-6">
              {filteredItems.map((item) => (
                <GearCard
                  key={item.id}
                  item={item}
                  player={player}
                  ownedItems={ownedItemIds}
                  setOwnedItems={setOwnedItemIds}
                  setPlayer={setPlayer}
                  view={view}
                  onZoom={handleZoom}
                />
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Zoom Modal */}
      {zoomItem && (
        <div
          className="fixed inset-0 z-50 bg-black/90 flex items-center justify-center p-6 animate-fade-in"
          onClick={() => setZoomIndex(null)}
        >
          <div
            className="relative max-w-3xl w-full"
            onClick={(e) => e.stopPropagation()}
          >
            <img
              src={zoomItem.image}
              alt={zoomItem.name}
              className="w-full h-auto rounded-2xl shadow-2xl transition-transform duration-300 ease-in-out transform hover:scale-105"
            />
            <div className="mt-4 text-center">
              <h2 className="text-2xl font-bold mb-2">{zoomItem.name}</h2>
              {zoomItem.description && (
                <p className="text-sm text-gray-300 mb-2">{zoomItem.description}</p>
              )}
              {zoomItem.stats && (
                <ul className="text-sm text-gray-400">
                  {Object.entries(zoomItem.stats).map(([key, value]) => (
                    <li key={key}>
                      <strong className="capitalize">{key}:</strong> {value}
                    </li>
                  ))}
                </ul>
              )}
              <button
                className="mt-6 bg-yellow-500 hover:bg-yellow-600 text-black px-6 py-2 rounded-full text-sm font-bold uppercase shadow-lg"
                onClick={() => setZoomIndex(null)}
              >
                Close
              </button>
            </div>

            {/* Navigation */}
            {filteredItems.length > 1 && (
              <>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setZoomIndex((prev) =>
                      prev === 0 ? filteredItems.length - 1 : prev - 1
                    );
                  }}
                  className="absolute left-4 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full"
                >
                  ◀
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setZoomIndex((prev) => (prev + 1) % filteredItems.length);
                  }}
                  className="absolute right-4 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full"
                >
                  ▶
                </button>
              </>
            )}
          </div>
        </div>
      )}
    </main>
  );
}
